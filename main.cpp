#include <format>
#include <cryptopp/md5.h>
#include <cryptopp/hex.h>

std::string get_md5_checksum(const std::string& str)
{
	CryptoPP::Weak1::MD5 md5;
	unsigned char digest[CryptoPP::Weak1::MD5::DIGESTSIZE];
	md5.CalculateDigest(digest, reinterpret_cast<const unsigned char*>(str.c_str()), str.length());

	std::string encoded;
	CryptoPP::HexEncoder encoder;
	encoder.Attach(new CryptoPP::StringSink(encoded));
	encoder.Put(digest, sizeof(digest));
	encoder.MessageEnd();

	return encoded;
}

std::string xor_decrypt(const std::uint8_t* encrypted_str, std::size_t pos, std::uint32_t key) {
	std::string str;
	str.reserve(32);
	for (std::size_t i = 0; i < 32; ++i) {
		str.push_back(encrypted_str[i + pos] ^ key);
		key = (key << 1) | (key >> 31);
	}
	return str;
}

std::string generate_klv(float game_version, std::uint32_t protocol, const std::string& rid, int32_t hash,
	const std::vector<std::string>& salts) {
	return get_md5_checksum(std::format(
		"{}{}{}{}{}{}{}{}{}",
		get_md5_checksum(get_md5_checksum(std::to_string(game_version))),
		salts[0],
		get_md5_checksum(get_md5_checksum(get_md5_checksum(std::to_string(protocol)))),
		salts[1],
		salts[2],
		get_md5_checksum(get_md5_checksum(rid)),
		salts[3],
		get_md5_checksum(get_md5_checksum(std::to_string(hash))),
		salts[4]
	));
}

int main()
{
	std::vector keys{1898659612, -27235823, 328180306, 57007415, -1767811648};
	std::vector<std::string> salts(5);
	constexpr uint8_t encryptedStr[]
	{
		0x24, 0x0B, 0x43, 0x82, 0xA6, 0xED, 0x2C, 0x0F, 0x40, 0x84,
		0xA2, 0xEB, 0x71, 0x43, 0x29, 0xA4, 0x1E, 0x34, 0xCA, 0x3C,
		0x82, 0x03, 0xFF, 0xFE, 0x08, 0x1F, 0x98, 0xC9, 0xC4, 0xD1,
		0xF5, 0xBF, 0x26, 0x13, 0x7E, 0xBD, 0x26, 0x09, 0x1B, 0x9B,
		0x9A, 0xCC, 0xCD, 0x95, 0x85, 0xF8, 0xA8, 0x07, 0x54, 0xA1,
		0xB6, 0x61, 0x32, 0x39, 0x29, 0x50, 0x09, 0xB7, 0x98, 0x67,
		0x98, 0x7B, 0xE5, 0x69, 0x64, 0x96, 0x7B, 0xF4, 0x44, 0x73,
		0xE1, 0x31, 0x75, 0x41, 0x28, 0xAE, 0x0A, 0x10, 0xD1, 0xA5,
		0xBC, 0x7A, 0x0E, 0x19, 0xCD, 0x91, 0xD8, 0xE0, 0x97, 0x7D,
		0xBA, 0x77, 0x12, 0x29, 0xA6, 0x1B, 0x55, 0x0C, 0xE4, 0x8B,
		0x45, 0x85, 0xF5, 0xE0, 0x36, 0x31, 0x68, 0x2D, 0x55, 0x54,
		0xE1, 0xD7, 0x57, 0xFF, 0xA3, 0x17, 0x69, 0x82, 0x4E, 0x8D,
		0xBC, 0x8E, 0x4C, 0xDE, 0xB0, 0xC3, 0x29, 0xA9, 0xA5, 0xE0,
		0x35, 0x32, 0x6C, 0x26, 0x41, 0x7D, 0xA6, 0x1D, 0x63, 0x87,
		0x52, 0xE6, 0x99, 0x68, 0x97, 0x72, 0xB3, 0x39, 0x73, 0x4F,
		0x6C, 0x9E, 0x63, 0x9E, 0x31, 0x9C, 0x38, 0x81, 0x11, 0x82
	};
	static_assert(sizeof(encryptedStr) >= 160, "Encrypted string size must be at least 160");

	for (auto key : keys)
	{
		int index = std::distance(keys.begin(), std::ranges::find(keys, key));
		std::string decSalt = xor_decrypt(encryptedStr, index * 32, key);
		std::printf("%i.Salt : %s\n", index, decSalt.c_str());
		salts.push_back(decSalt);
	}
	std::printf("Generated Klv %s\n",
		generate_klv(4.47f, 0xC9, "0182E268D08AB45702A841A172170E12", 1431658473, salts).c_str());
}
